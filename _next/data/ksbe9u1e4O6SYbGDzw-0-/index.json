{"pageProps":{"articles":[{"date":"2022-04-29","name":"2022-04-29-google-docs-for-blogging","slug":"google-docs-for-blogging","body":"Googleドキュメントを書くとブログが更新される仕組みをつくった。\n\n※[r7kamura.comに投稿した記事](https://r7kamura.com/articles/2022-04-30-google-docs-for-blogging)と同じ内容の記事を、サンプルとしてここに再掲載しています。\n\n動機\n--\n\n以前より度々、組織で運用しているブログに記事を投稿する機会があった。この手のブログの記事原稿は、事前にGoogleドキュメントでやり取りされ、そこでレビューや校正をすることが多かった。\n\nそこでいっそ、Googleドキュメントをフォルダに入れるとブログになってくれたら良いのにと考えた。Googleドキュメントのエディタはとても使いやすいので、共同編集の場でも、個人運営のブログでも役に立つと思う。\n\n仕組み\n---\n\nGitHub Actions、Google Drive API、Next.js、GitHub Pagesなどを利用して実現している。\n\nGitHub Actionsでは、次の2つのワークフローが動いている。\n\n1.  定期的にGitHubへエクスポート\n2.  エクスポートされたら静的サイトを更新\n\nエクスポート処理\n--------\n\nドキュメントのエクスポートには、2種類のGoogle Drive APIを利用している。\n\n*   ファイル群を検索するAPI\n*   ドキュメントをHTML形式でエクスポートするAPI\n\n無料ユーザーでも100秒あたり20,000件のリクエストを発行できるので、定期的に実行しても問題になる心配は少ない。\n\n認証・認可\n-----\n\nGitHub ActionsからGoogle Drive APIを利用するにあたり、GCPでプロジェクトを用意し、Google Drive APIに対して閲覧権限のあるサービスアカウントをつくり、このアカウントとGoogle Driveのフォルダを共有し、OIDC経由で認証させている。\n\nGoogle DriveからGitHubへのエクスポート処理は、[r7kamura/google-docs-to-github](https://github.com/r7kamura/google-docs-to-github)というCustom actionに切り出してあるので、他の用途でも再利用できる。これを呼び出すと、Google Drive上の指定されたフォルダを検索し、個々のドキュメントをJSON形式で書き出し、リポジトリ内の適当なディレクトリにPushしてくれる。\n\nドキュメントの加工\n---------\n\n記事として成立させるには、幾つかのデータを用意しなければならない。\n\n*   投稿日\n*   URL\n*   タイトル\n*   本文\n\n投稿日とURLに利用するために、”2022-04-28-about” のようなファイル名のドキュメントにしてもらう制約を設けた。これだと投稿時刻は提供できないものの、実際に時刻が絶対に求められるユースケースは稀だろう。ドキュメントの作成日時についても検討したが、例えば3日間掛けて書いて今日フォルダに入れて投稿するということもあり得るので、作成日時を投稿日に使うのは避けた。\n\n本文冒頭の1行を、記事タイトルとして利用している。概ね良い作戦だと思っているが、これも一種の制約であり、無題の記事は用意できない。\n\nドキュメントをエクスポートするとHTMLページとしてのソースコードが得られるので、これのbody要素を抽出し、装飾のための不要な要素や属性を取り除いて構造的な情報に落とし込んだ上で、記事の本文として利用している。\n\nNext.jsを静的サイトジェネレーターとして利用して、このデータをブログとして公開している。Markdownを記事データにするのと大体同じような話なので、詳細は割愛する。\n\n失敗談\n---\n\n作業の過程で結局取りやめた物事について。\n\nGoogle Drive APIには、特定のアカウントを監視してWebhookで通知してくれる機能がある。これをGoogle Apps Scriptで受け、ドキュメントの内容をGitHub API経由でPushできると良さそうに見える。しかしこの監視には7日間の有効期限があることが分かり、この作戦は今回は断念することになった。Push型の変更検知は理想的な方法だが、定期的に購読し直す仕組みを用意する必要があり、難易度が高い。GoogleとGitHubの設定をまとめて一気に用意できる程度に自動化が進めば、この方針で再挑戦してみても良いかもしれない。\n\nGoogle Drive APIを利用している部分について、当初は何となくRubyで実装していたが、google-api-ruby-clientがWorkload Identity連携での認可方法に現時点では対応していないことが分かり、既に対応済みであったNode.jsでの実装に乗り換えることになった。\n\n所感\n--\n\nGoogleドキュメントで記事を書くのは体験が良い。\n\nエディタでMarkdownを書いてGitでPushするのと違い、Googleドキュメントで文章を書くのはとにかく手軽で、しかしながらエディタがよく出来ている。日本語の校正機能がしっかりしていたり、アウトラインを意識して書けたり、履歴が自動保存されたり、共同編集できたり、レビューしてもらえたりと、簡単なものからしっかりしたものまで、文章を書く上であると嬉しいものが揃っている。\n\nGCPやGitHubの初期設定は少し難しいが、それなりに現実的に動くものができたと思う。画像や図表を扱えるようになると、Googleドキュメントで書ける利点がより出てくると思う。\n\n先日このウェブサイトを改修して、単純なMarkdownファイル以外の原稿を扱いやすくするような仕組みを整えたので、GoogleドキュメントとMarkdownファイルの両方で記事を書けるようにしてみようと考えている。\n","title":"Googleドキュメントでブログを書く"},{"date":"2022-04-28","name":"2022-04-28-about","slug":"about","body":"このブログは、Googleドキュメントを利用して記事を書くブログのデモとして用意されたブログです。\n\n作者である[r7kamura](https://github.com/r7kamura)がGoogleドキュメントで記事の原稿を書き、Googleドライブ上の特定のフォルダに入れることで、自動的にページが作成・更新されています。\n\nこのブログのソースコードは、[r7kamura/google-docs-blog-example](https://github.com/r7kamura/google-docs-blog-example)にて公開されています。また、後日このブログについての技術的な解説記事を投稿する予定です。お楽しみに。\n","title":"このブログについて"}]},"__N_SSG":true}